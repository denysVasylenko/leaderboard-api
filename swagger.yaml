openapi: 3.0.0
info:
  title: Leaderboard
  version: '1.0'
  description: Api doc for leaderboard
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags:
        - User
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                GetUser:
                  value:
                    id: f17a977d-6068-4267-bf59-d00a93f62d09
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    rating: 1000
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: e4d7d5ba-a95d-414a-a9eb-9a4a42b24918
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    rating: 1000
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                rating:
                  type: integer
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
              Update Rating:
                value:
                  rating: 1100
        description: Patch user properties to update.
      tags:
        - User
    delete:
      summary: Delete User by User ID
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
      description: Delete user
      tags:
        - User
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Alice Smith:
                  value:
                    id: f17a977d-6068-4267-bf59-d00a93f62d09
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    rating: 1000
                    region: NA
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                rating:
                  type: integer
                  default: 0
                region:
                  $ref: '#/components/schemas/RegionEnum'
              required:
                - firstName
                - lastName
                - email
                - rating
                - region
            examples:
              Create User Alice Smith:
                value:
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  rating: 0
                  region: NA
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - User
  /user/score:
    post:
      summary: Create user score
      operationId: post-user-score
      responses:
        '200':
          description: OK
      description: Creates new user score after finished game.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
                  minimum: -100
                  maximum: 100
                userId:
                  type: string
                ts:
                  type: integer
            examples:
              UserScore:
                value:
                  score: 100
                  userId: f17a977d-6068-4267-bf59-d00a93f62d09
                  ts: 1632543166
        description: ''
      tags:
        - User score
    parameters: []
  '/users/{userId}/scores':
    get:
      summary: Get user scores
      tags:
        - User score
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  required:
                    - score
                    - ts
                  properties:
                    score:
                      type: number
                    ts:
                      type: number
              examples:
                GetUserScores:
                  value:
                    - score: 10
                      ts: 1632553966
                    - score: -10
                      ts: 1632543166
      operationId: get-user-scores
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /leaderboard:
    get:
      summary: Get leaderboard
      tags:
        - Leaderboard
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  leaderboard:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - userName
                        - rating
                        - leaderboardPosition
                      properties:
                        userName:
                          type: string
                          minLength: 1
                        rating:
                          type: number
                        leaderboardPosition:
                          type: number
                required:
                  - leaderboard
                x-examples:
                  example-1:
                    leaderboard:
                      - userName: Alice Smith
                        rating: 1000
                        leaderboardPosition: 1
              examples:
                GetLeaderboard:
                  value:
                    leaderboard:
                      - userName: Jotaro Kujo
                        rating: 1000
                        region: NA
                        leaderboardPosition: 1
                      - userName: Jonathan Joestar
                        rating: 999
                        region: NA
                        leaderboardPosition: 2
                      - userName: Joseph Joestar
                        rating: 998
                        region: NA
                        leaderboardPosition: 3
                      - userName: Giorno Giovanna
                        rating: 997
                        region: NA
                        leaderboardPosition: 4
      operationId: get-leaderboard
      description: 'Retrieve 100 players with highest rating '
      parameters:
        - $ref: '#/components/parameters/region'
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: f17a977d-6068-4267-bf59-d00a93f62d09
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          rating: 0
          region: NA
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        rating:
          type: number
          minimum: 0
        region:
          $ref: '#/components/schemas/RegionEnum'
      required:
        - id
        - firstName
        - lastName
        - email
    UserScore:
      title: UserScore
      type: object
      x-examples:
        UserScore:
          id: 739dd65a-1644-47fe-9975-8000ccde9ce0
          userId: f17a977d-6068-4267-bf59-d00a93f62d09
          score: 100
          region: NA
          ts: 1632553966
      properties:
        id:
          type: string
        userId:
          type: string
        score:
          type: number
          minimum: -100
          maximum: 100
          example: 100
        ts:
          type: number
      required:
        - id
        - userId
    RegionEnum:
      type: string
      title: RegionEnum
      enum:
        - EU
        - NA
        - SA
        - AF
        - AS
        - OC
      description: Available regions
  parameters:
    region:
      name: region
      in: query
      required: false
      schema:
        type: string
        enum:
          - EU
          - NA
          - SA
          - AF
          - AS
          - OC
          - GLOBAL
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
